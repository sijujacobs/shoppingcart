{"version":3,"sources":["components/Header.jsx","components/CartItem.jsx","redux/actions/index.js","redux/constants/index.js","components/Cart.jsx","components/ProductDetails.jsx","components/ProductList.jsx","components/Footer.jsx","App.js","serviceWorker.js","redux/reducers/photoReducer.js","redux/reducers/cartReducer.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["connectedHeader","connect","state","cartItems","cartReducer","props","className","length","connectedCartItem","dispatch","removeItem","selectedProduct","type","payload","alt","src","item","thumbnailUrl","title","substring","onClick","connectedCart","map","p","key","id","connectedProductDetails","addToCart","product","console","log","itemFound","find","alert","addToCartHandler","connectedProductList","photos","photoReducer","Footer","App","this","getPhotosByThunkAxios","React","Component","connectedApp","axios","get","then","response","data","splice","catch","err","Boolean","window","location","hostname","match","initialState","action","Object","assign","concat","filter","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e74af395.chunk.js","sourcesContent":["import React from 'react';\n\nimport {connect} from 'react-redux';\nconst Header = (props) => {\n    \n    return(<div className=\"header\">\n                <div className=\"logoSection\"><span><h2>IMPETUS - React Project</h2><h3>App built on React-Redux-Thunk-SASS</h3></span> </div>\n                <div className=\"statusSection\">\n                    <span className=\"cartStatus\">{props.cartItems.length + \" : Items\"}</span>\n                </div>\n        </div>)\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        cartItems : state.cartReducer.cartItems\n    }\n}\n\nconst connectedHeader = connect(mapStateToProps)(Header);\nexport default connectedHeader;","import React from 'react';\n\nimport { connect } from 'react-redux';\nimport { removeItem } from '../redux/actions/index';\n\nconst CartItem = (props) => {\n    const removeItemHandler = (selectedProduct) => {\n        props.removeItem(selectedProduct);\n    }\n    return (<div className=\"cartItem fadeItem\">\n                <div className=\"itemImage\">\n                    <img alt=\"itemImage\" src={props.item.thumbnailUrl} />\n                </div>\n                <div className=\"itemDesc\">\n                    {props.item.title.substring(0, 10)}\n                </div>\n                <div className=\"buttonSection\">\n                    <button className=\"button\" onClick={() => removeItemHandler(props.item)}>Remove</button>\n                </div>\n            </div>)\n}\n\n\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        removeItem: (selectedProduct) => dispatch(removeItem(selectedProduct))\n    }\n}\n\nconst connectedCartItem = connect(null, mapDispatchToProps)(CartItem);\nexport default connectedCartItem;\n","import {GET_PHOTOS, ADD_TO_CART, REMOVE_ITEM} from '../constants/index';\nimport axios from 'axios';\n\nexport const getPhotos = () => {\n\n    let pList = [\n        {\n          \"albumId\"     : 1,\n          \"id\"          : 1,\n          \"title\"       : \"accusamus beatae ad facilis cum similique qui sunt\",\n          \"url\"         : \"https://via.placeholder.com/600/92c952\",\n          \"thumbnailUrl\": \"https://via.placeholder.com/150/92c952\"\n        },\n        {\n          \"albumId\"     : 1,\n          \"id\"          : 2,\n          \"title\"       : \"reprehenderit est deserunt velit ipsam\",\n          \"url\"         : \"https://via.placeholder.com/600/771796\",\n          \"thumbnailUrl\": \"https://via.placeholder.com/150/771796\"\n        },\n        {\n          \"albumId\"     : 1,\n          \"id\"          : 3,\n          \"title\"       : \"osijufficia porro iure quia iusto qui ipsa ut modi\",\n          \"url\"         : \"https://via.placeholder.com/600/24f355\",\n          \"thumbnailUrl\": \"https://via.placeholder.com/150/24f355\"\n        }\n    ];\n    return {\n        type : GET_PHOTOS,\n        payload : pList\n    }\n}\n\nexport const getPhotosByThunkAxios = () => {\n  return (dispatch) => {\n    return axios.get(\"https://jsonplaceholder.typicode.com/photos\")\n            // .then(response => {dispatch(fetchDataFormReslt(response.data))})\n            .then(response => dispatch({ type: 'GET_PHOTOS', payload: response.data.splice(4900) }))\n            .catch(err => {console.log(\"getPhotosByThunkAxios :: ERROR : \", err)})\n  }\n}\n\n// const fetchDataFormReslt = (data) => {\n//   return{\n//     type : GET_PHOTOS,\n//     payload : data\n//   }\n// }\n\n\n\nexport const addToCart = (selectedItem) => {\n  return {\n    type    : ADD_TO_CART,\n    payload : selectedItem\n  }\n}\n\nexport const removeItem = (selectedItem) => {\n  return {\n    type    : REMOVE_ITEM,\n    payload : selectedItem\n  }\n}\n\n","export const GET_PHOTOS = \"GET_PHOTOS\";\nexport const GET_CART_ITEMS = \"GET_CART_ITEMS\";\nexport const ADD_TO_CART = \"ADD_TO_CART\";\nexport const REMOVE_ITEM = \"REMOVE_ITEM\";","import React from 'react';\n\nimport {connect} from 'react-redux';\nimport CartItem from './CartItem';\n\n\nconst Cart = (props) => {\n\n    return(<div className=\"cart\">\n            {\n                (props.cartItems && props.cartItems.length > 0) && \n                props.cartItems.map(p => <CartItem key={p.id} item={p}/>)\n            }\n        </div>)\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        cartItems : state.cartReducer.cartItems\n    }\n}\n\nconst connectedCart = connect(mapStateToProps)(Cart);\nexport default connectedCart;","import React from 'react';\nimport {connect} from 'react-redux';\nimport {addToCart} from '../redux/actions/index';\n\nconst ProductDetails = (props) => {\n\n    const addToCartHandler = (selectedProduct) => {\n\n        console.log(' addToCartHandler :: props.cartItems : ', props.cartItems);\n        \n        let itemFound = props.cartItems.find(function(item) {\n            return item.id === selectedProduct.id;\n        });\n        if(itemFound && itemFound.id > 0){\n            alert(\"Item already added to Cart\");\n        }else{\n            props.addToCart(props.product);\n        }\n\n    }\n\n    return(<div className=\"productDetails\">\n            <div className=\"productImage\">\n                <img  alt=\"productImage\" src={props.product.thumbnailUrl}/>\n            </div>\n            <div className=\"productDesc\">\n                {props.product.title.substring(0, 10)}\n            </div>\n            <div className=\"buttonSection\">\n                <button className=\"button\" onClick={() => addToCartHandler(props.product)}>Add to Cart</button>\n            </div>\n        </div>)\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addToCart : (selectedProduct) => dispatch(addToCart(selectedProduct))\n    }\n}\n\nconst connectedProductDetails = connect(null, mapDispatchToProps)(ProductDetails);\nexport default connectedProductDetails;","import React from 'react';\nimport {connect} from 'react-redux';\nimport ProductDetails from './ProductDetails';\n//\n\nconst ProductList = (props) => {\n    return(<div className=\"productList\">\n        {\n            (props.photos && props.photos.length > 0) && \n            props.photos.map(p => <ProductDetails key={p.id} product={p} cartItems={props.cartItems}/>)}\n    </div>)\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        photos : state.photoReducer.photos,\n        cartItems : state.cartReducer.cartItems\n    }\n}\n\n\nconst connectedProductList = connect(mapStateToProps)(ProductList);\nexport default connectedProductList;","import React from 'react';\nconst Footer = () => {\n    return(<div className=\"footer\">Footer</div>)\n}\n\nexport default Footer;","import React from 'react';\nimport {connect} from 'react-redux';\nimport {getPhotosByThunkAxios} from './redux/actions/index';\nimport Header from './components/Header';\nimport Cart from './components/Cart';\nimport ProductList from './components/ProductList';\nimport Footer from './components/Footer';\nimport './css/style.css';\n\n\nclass App extends React.Component{\n  componentDidMount(){\n\t// this.props.getPhotos();\n\tthis.props.getPhotosByThunkAxios();\n  }\n  render(){\n    return(<div className=\"appContainer\">\n\t\t\t<Header/>\n\t\t\t<ProductList/>\n\t\t\t<Cart/>\n\t\t\t<Footer />\n\t\t </div>)\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn{\n\t\tgetPhotosByThunkAxios : () => dispatch(getPhotosByThunkAxios()),\n\t}  \n}\n\nconst connectedApp = connect(null, mapDispatchToProps)(App);\n\nexport default connectedApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {GET_PHOTOS} from '../constants/index';\n\n\nconst initialState = {\n    photos : []\n}\nconst photoReducer = (state = initialState, action) => {\n    switch(action.type){\n        case GET_PHOTOS:\n            return {\n                photos : action.payload\n            };\n        default:{\n            return state;\n        }\n\n    }\n    // if(action.type === GET_PHOTOS){\n    //     return Object.assign({}, state, {photos : state.photos.concat(action.payload)});\n    // }\n    // return state;\n}\n\nexport default photoReducer;\n\n\n\n","import {GET_CART_ITEMS, ADD_TO_CART, REMOVE_ITEM} from '../constants/index';\n\nconst initialState = {\n    cartItems : []\n}\nconst cartReducer = (state = initialState, action) => {\n    console.log(' cartReducer :: AddToCart : state - ', state, ', action - ', action);\n            \n    switch(action.type){\n        case GET_CART_ITEMS:\n            return Object.assign({}, state, {cartItems: state.cartItems.concat(action.payload)});\n        case ADD_TO_CART:\n            return Object.assign({}, state, {cartItems: state.cartItems.concat(action.payload)});\n        case REMOVE_ITEM:\n            return Object.assign({}, state, {cartItems: state.cartItems.filter(item => action.payload.id !== item.id)});\n        default:\n            return state;\n    }\n}\n\nexport default cartReducer;","import {combineReducers} from 'redux';\nimport photoReducer from './photoReducer';\nimport cartReducer from './cartReducer';\n\n\nconst rootReducer = combineReducers({\n    photoReducer,\n    cartReducer\n});\n\nexport default rootReducer;\n\n","import {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from '../reducers/index';\n// import photoReducer from '../reducers/photoReducer';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './redux/store/index';\n\n\n\nReactDOM.render(<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}